@model IEnumerable<FlightPack>
@inject IHttpContextAccessor HttpContextAccessor

@{
	ViewData["Title"] = "Flights";
	FlightPack pack = Model.FirstOrDefault();
}

<div class="d-flex justify-content-center center-div flex-wrap border-0 p-0">
	<form class="col-md-4 filter-div bg-light">
		<h4>Sort by</h4>
		<h6>Price</h6>
		<div class="form-group">
			<select name="sort" asp-items="Html.GetEnumSelectList<Sort>()" class="form-select">
			</select>
		</div>
		<h4>Filter by</h4>
		<h6>Price range</h6>
		<div class="d-flex inline-block">
			<div class="form-group w-100">
				<input type="number" name="minprice" class="form-control" id="minprice" placeholder="Minimum price">
			</div>
			<div class="form-group w-100">
				<input type="number" name="maxprice" class="form-control" id="maxprice" placeholder="Maximum price">
			</div>
		</div>
		<h6>Departure time in @Html.DisplayFor(item => Model.FirstOrDefault().FlightGoing.DepartureCity)</h6>
		<div class="form-group">
			<select name="DepartureTime" asp-items="@Html.GetEnumSelectList<Time>()" class="form-select">
			</select>
		</div>
		<h6>Departure time in @Html.DisplayFor(item => Model.FirstOrDefault().FlightComing.DepartureCity)</h6>
		<div class="form-group">
			<select name="ArrivalTime" asp-items="Html.GetEnumSelectList<Time>()" class="form-select">
			</select>
		</div>
		<div class="form-group">
		</div>
		<div class="btn-group col-12 mt-4">
			<button id="filter-submit" formaction="/Flight/Index?currency=USD&multiplier=1.00" type="submit" value="submit" name="submit" formmethod="post" class="btn btn-outline-primary">
				<i class="bi bi-funnel"></i>
				Apply filters
			</button>
			<a class="btn btn-outline-danger" asp-controller="Flight" asp-action="ResetIndex">
				<i class="bi bi-x"></i>
				Reset filters
			</a>
		</div>
	</form>

	<div class="col-md-8 result-div">
		@if (Model.Count() == 0)
		{
			<div class="text-danger">There are no such flights. Please try searching again!</div>
		}
		@foreach (var flight in Model)
		{
			<div class="infocard">
				<div class="infocard-body col-md">
					<div class="d-flex justify-content-between">
						<div>
							<p class="time-interval">@Convert.ToDateTime(flight.FlightGoing.DepartureTime).ToString("hh:mm tt") - @Convert.ToDateTime(flight.FlightGoing.ArrivalTime).ToString("hh:mm tt")</p>
							<p class="nonaccent">@Html.DisplayFor(flightItem => flight.FlightGoing.DepartureCity) (@Html.DisplayFor(flightItem => flight.FlightGoing.DepartureAirport)) - @Html.DisplayFor(flightItem => flight.FlightGoing.ArrivalCity) (@Html.DisplayFor(flightItem => flight.FlightGoing.ArrivalAirport))</p>
							<p class="price-item time-interval">USD @Html.DisplayFor(flightItem => flight.FlightGoing.Price).00</p>
						</div>
						<div>
							<h2><i class="bi bi-arrow-left-right"></i></h2>
						</div>
						<div>
							<p class="time-interval">@Convert.ToDateTime(flight.FlightComing.DepartureTime).ToString("hh:mm tt") - @Convert.ToDateTime(flight.FlightComing.ArrivalTime).ToString("hh:mm tt")</p>
							<p class="nonaccent">@Html.DisplayFor(flightItem => flight.FlightComing.DepartureCity) (@Html.DisplayFor(flightItem => flight.FlightComing.DepartureAirport)) - @Html.DisplayFor(flightItem => flight.FlightComing.ArrivalCity) (@Html.DisplayFor(flightItem => flight.FlightComing.ArrivalAirport))</p>
							<p  class="price-item time-interval">USD @Html.DisplayFor(flightItem => flight.FlightComing.Price).00</p>
						</div>
					</div>
					<div class="price position-absolute bottom-10 start-10 price-item">USD @Html.DisplayFor(flightItem => flight.Price).00</div>
					<div class="position-absolute bottom-10 end-10">
						<a asp-action="BookFlight" asp-controller="Flight" asp-route-goingId=@flight.FlightGoing.FlightId asp-route-comingId=@flight.FlightComing.FlightId type="submit" class="btn btn-outline-primary">
							<i class="bi bi-bookmark-check"></i> Buy tickets
						</a>
					</div>
				</div>
			</div>
		}
	</div>

</div>

<script>
	document.getElementById("exchange").classList.remove("d-none");

	var pastCurrency = '@HttpContextAccessor.HttpContext.Session.GetString("currency")';
	var pastMultiplier = '@HttpContextAccessor.HttpContext.Session.GetString("multiplier")';

	var filterBtn = document.getElementById("filter-submit");
	var currencyDropdown = document.getElementById("currency-dropdown");

	if(pastCurrency != ""){
		changePrices(pastCurrency, pastMultiplier);
		changeFilterButton(pastCurrency, pastMultiplier);
	}
	
	var currentCurrency = pastCurrency == "" ? "USD" : pastCurrency;
	currencyDropdown.textContent = pastCurrency == "" ? "USD" : pastCurrency;
	console.log(">>>", currentCurrency)
	document.getElementById("currency-selection").addEventListener("click", function(event) {
		if (event.target.classList.contains("currency-select")) {

			var currency = event.target.getAttribute("name");
			var apiUrl = 'https://openexchangerates.org/api/latest.json?app_id=8c6c1dacc56f41b0a813bb5fae8205e0&symbols='+currency+','+currentCurrency;
			fetch(apiUrl)
				.then(response => {
				if (!response.ok) {
					throw new Error("Network response was not ok");
				}
				return response.json();
				})
				.then(data => {

					console.log(currentCurrency, "--->", currency)

					currencyDropdown.textContent = currency;

				var currentMultiplier = parseFloat(data['rates'][currentCurrency]).toFixed(2);
				var upcomingMultiplier = parseFloat(data['rates'][currency]).toFixed(2);
				var multiplier = upcomingMultiplier/currentMultiplier;
				currentCurrency = currency;

				changePrices(currency, multiplier);

				changeFilterButton(currency, upcomingMultiplier);

				})
				.catch(error => {
				console.error("Error fetching data:", error);
				});
		}	
	})

	function changePrices(currency, multiplier){
		var priceItems = document.getElementsByClassName("price-item");
		for (var i = 0; i < priceItems.length; i++) {
			var currentItem = priceItems[i].textContent;
			currentItem = currentItem.split(" ");
			currentItem[0] = currency;
			currentItem[1] = Number(parseFloat(currentItem[1]) * multiplier).toFixed(2);
			priceItems[i].textContent = currentItem.join(" ");
		}
	}

	function changeFilterButton(currency, multiplier){
		var formactionString = filterBtn.getAttribute("formaction");
		formactionString = formactionString.split("?");
		formactionString[1] = 'currency='+currency+'&multiplier='+multiplier;
		formactionString = formactionString.join("?");
		filterBtn.setAttribute("formaction", formactionString);
	}

	// Iterate over all elements
	
</script>